---
import { type CollectionEntry, getCollection } from 'astro:content'
import Layout from '@/layouts/layout.astro'
import { formatDate } from '@/utils/format-date'
import { css, cx } from '#/styled-system/css'
import { prose, article } from '#/styled-system/recipes'
import TableOfContents from '@/components/table-of-contents.astro'
import { container } from '#/styled-system/patterns'
import Header from '@/components/header'

export async function getStaticPaths() {
  const articles = await getCollection('articles')

  return articles.map((item) => ({
    params: { slug: item.slug },
    props: { post: item },
  }))
}

type Props = {
  post: CollectionEntry<'articles'>
}

const { post } = Astro.props
const { Content, headings } = await post.render()
const isDev = import.meta.env.DEV
---

<Layout
  content
  title={post.data.title}
  description={post.data.description}
  canonical={`${import.meta.env.SITE}${post.slug}/`}
  publishedTime={post.data.publishedAt.toISOString()}
  openGraph={{
    image: {
      url: `${import.meta.env.SITE}/posts/${post.slug}/og.png`,
    },
  } as any}
>
  <article>
    <Header />
    <main class={cx(prose(), article())}>
      <header role="presentation">
        <time datetime={post.data.publishedAt.toISOString()}>
          {formatDate(post.data.publishedAt)}
        </time>
        <h1 id="top" class="group">
          <a aria-hidden="true" tabindex="-1" href="#top"><span class="h-anchor">#</span></a>
          {post.data.title}
        </h1>
        <p class={css({ fontStyle: 'italic' })}>{post.data.description}</p>
      </header>

      <Content />
      <div class={css({ position: 'fixed', left: 0, top: '100px', w: '100%', pointerEvents: 'none' })}>
        <div
          class={container({
            ml: 'auto',
            mr: 'auto',
            display: 'flex',
            minH: 'screen',
            maxW: '1080px',
            flexDir: 'column',
          })}
        >
          <div
            class={css({
              position: 'absolute',
              right: 'calc(100% + 20px)',
              overflow: 'auto',
              scrollBehavior: 'smooth',
              pointerEvents: 'auto',
              h: '100%',
              w: '230px',
              textStyle: 'sm',
              '@media screen and (max-width: 1450px)': {
                right: 'calc(100% - 40px)',
                textStyle: 'xs',
                w: '200px',
              },
              '@media screen and (max-width: 1315px)': {
                right: 'calc(100% - 80px)',
                textStyle: 'xs',
                w: '180px',
              },
              '@media screen and (max-width: 1180px)': {
                fontSize: 'x-small',
                w: '150px',
              },
              '@media screen and (max-width: 1075px)': {
                display: 'none',
              },
            })}
          >
            <TableOfContents headings={headings} />
          </div>
        </div>
      </div>
    </main>
    {
      !isDev && (
        <script
          src="https://giscus.app/client.js"
          data-repo="astahmer/astahmer.dev"
          data-repo-id="R_kgDOKLH7eQ"
          data-category="Announcements"
          data-category-id="DIC_kwDOKLH7ec4CbdnF"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="preferred_color_scheme"
          data-lang="en"
          data-loading="lazy"
          crossorigin="anonymous"
          async
        />
      )
    }
  </article>
</Layout>

<style is:global>
  .group:hover a {
    opacity: 1;
  }
</style>
