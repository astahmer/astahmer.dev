---
import { colorModeConfig } from '@/utils/color-mode'

// Adapted from https://github.com/astahmer/panda-chakra/blob/77c1fb09b150e3b7849360dc41568eb1710f61fd/packages/color-mode/src/color-mode-provider.tsx#L72

interface ValueObject {
  [colorModeName: string]: string
}

interface ColorModeProviderProps {
  /** List of all available colorMode names */
  colorModes?: string[]
  /** Forced colorMode name for the current page */
  forcedColorMode?: string
  /** Whether to switch between dark and light colorModes based on prefers-color-scheme */
  enableSystem?: boolean
  /** Disable all CSS transitions when switching colorModes */
  disableTransitionOnChange?: boolean
  /** Whether to indicate to browsers which color scheme is used (dark or light) for built-in UI like inputs and buttons */
  enableColorScheme?: boolean
  /** Key used to store colorMode setting in localStorage */
  storageKey?: string
  /** Default colorMode name (for v0.0.12 and lower the default was light). If `enableSystem` is false, the default colorMode is light */
  defaultColorMode?: string
  /** HTML attribute modified based on the active colorMode. Accepts `class` and `data-*` (meaning any data attribute, `data-mode`, `data-color`, etc.) */
  attribute?: 'class' | (string & {})
  /** Mapping of colorMode name to HTML attribute value. Object where key is the colorMode name and value is the attribute value */
  value?: ValueObject
  /** Nonce string to pass to the inline script for CSP headers */
  //   nonce?: string

  shadowHostId?: string
  rootId?: string
}

interface Props {}

const colorSchemes = ['light', 'dark']
const MEDIA = '(prefers-color-scheme: dark)'

const getColorModeScript = (
  props: ColorModeProviderProps & {
    defaultColorMode?: string
  },
) => {
  const {
    forcedColorMode,
    value,
    storageKey = colorModeConfig.COLOR_MODE_STORAGE_KEY,
    attribute = colorModeConfig.ATTRIBUTE,
    enableSystem = true,
    enableColorScheme = true,
    defaultColorMode = enableSystem ? 'system' : colorModeConfig.DEFAULT_COLOR_MODE,
  } = props
  const defaultSystem = defaultColorMode === 'system'

  // Code-golfing the amount of characters in the script
  const optimization = (() => {
    const host = `document.documentElement`

    if (attribute === 'class') {
      const removeClasses = `c.remove(${Object.keys(colorSchemes)
        .map((t: string) => `'${t}'`)
        .join(',')})`

      return `var d=${host},c=d.classList;${removeClasses};`
    } else {
      return `var d=${host},n='${attribute}',s='setAttribute';`
    }
  })()

  const fallbackColorScheme = (() => {
    if (!enableColorScheme) {
      return ''
    }

    const fallback = colorSchemes.includes(defaultColorMode) ? defaultColorMode : null

    if (fallback) {
      return `if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'${defaultColorMode}'`
    } else {
      return `if(e==='light'||e==='dark')d.style.colorScheme=e`
    }
  })()

  const updateDOM = (name: string, literal: boolean = false, setColorScheme = true) => {
    const resolvedName = value ? value[name] : name
    const val = literal ? name + `|| ''` : `'${resolvedName}'`
    let text = ''

    // MUCH faster to set colorScheme alongside HTML attribute/class
    // as it only incurs 1 style recalculation rather than 2
    // This can save over 250ms of work for pages with big DOM
    if (enableColorScheme && setColorScheme && !literal && colorSchemes.includes(name)) {
      text += `d.style.colorScheme = '${name}';`
    }

    if (attribute === 'class') {
      if (literal || resolvedName) {
        text += `c.add(${val})`
      } else {
        text += `null`
      }
    } else {
      if (resolvedName) {
        text += `d[s](n,${val})`
      }
    }

    return text
  }

  const scriptSrc = (() => {
    if (forcedColorMode) {
      return `!function(){${optimization}${updateDOM(forcedColorMode)}}()`
    }

    if (enableSystem) {
      return `!function(){try{${optimization}var e=localStorage.getItem('${storageKey}');if('system'===e||(!e&&${defaultSystem})){var t='${MEDIA}',m=window.matchMedia(t);if(m.media!==t||m.matches){${updateDOM(
        'dark',
      )}}else{${updateDOM('light')}}}else if(e){${value ? `var x=${JSON.stringify(value)};` : ''}${updateDOM(
        value ? `x[e]` : 'e',
        true,
      )}}${
        !defaultSystem ? `else{` + updateDOM(defaultColorMode, false, false) + '}' : ''
      }${fallbackColorScheme}}catch(e){}}()`
    }

    return `!function(){try{${optimization}var e=localStorage.getItem('${storageKey}');if(e){${
      value ? `var x=${JSON.stringify(value)};` : ''
    }${updateDOM(value ? `x[e]` : 'e', true)}}else{${updateDOM(
      defaultColorMode,
      false,
      false,
    )};}${fallbackColorScheme}}catch(t){}}();`
  })()

  return scriptSrc
}

const scriptSrc = getColorModeScript({})
---

<script set:html={scriptSrc} />
